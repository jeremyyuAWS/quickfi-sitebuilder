import React, { useState, useEffect } from 'react';
import { 
  MessageSquare, ThumbsUp, ThumbsDown, Download, Filter, Search, 
  ArrowLeft, Bot, Flag, Check, X, AlertTriangle, BarChart 
} from 'lucide-react';
import { FeedbackData } from './FeedbackMode';

interface AdminPanelProps {
  onBack: () => void;
}

// Mock feedback data for demonstration
const mockFeedbackData: (FeedbackData & { 
  id: string; 
  timestamp: string; 
  status: 'new' | 'reviewed' | 'resolved';
  dealerName?: string;
})[] = [
  {
    id: '1',
    rating: 'positive',
    category: 'Content Quality',
    message: 'The content agent did a great job creating relevant website copy for our construction equipment dealership.',
    agentId: 'content-agent',
    timestamp: '2025-05-10T14:30:00Z',
    status: 'new',
    dealerName: 'XCMG North America'
  },
  {
    id: '2',
    rating: 'negative',
    category: 'Translation Accuracy',
    message: 'The French translation had several errors in technical terms related to our equipment.',
    agentId: 'translation-agent',
    timestamp: '2025-05-09T10:15:00Z',
    status: 'reviewed',
    dealerName: 'Wacker Neuson Canada'
  },
  {
    id: '3',
    rating: 'positive',
    category: 'Design Suggestions',
    message: 'The color palette suggested by the design agent matched our brand perfectly.',
    agentId: 'design-agent',
    timestamp: '2025-05-08T16:45:00Z',
    status: 'resolved',
    dealerName: 'Cat Equipment'
  },
  {
    id: '4',
    rating: 'negative',
    category: 'Pricing Format',
    message: 'The pricing tables are not displaying the monthly payment correctly when the term is 60 months.',
    agentId: 'pricing-agent',
    timestamp: '2025-05-07T11:30:00Z',
    status: 'new',
    dealerName: 'John Deere Finance'
  },
  {
    id: '5',
    rating: 'negative',
    category: 'Technical Issue',
    message: 'Experienced an error when trying to upload our pricing sheet in Excel format.',
    agentId: null,
    timestamp: '2025-05-06T09:20:00Z',
    status: 'reviewed',
    dealerName: 'Volvo Construction'
  },
  {
    id: '6',
    rating: 'positive',
    category: 'Feature Request',
    message: 'Would love to see an option for embedding video content generated by the multimedia agent.',
    agentId: null,
    timestamp: '2025-05-05T15:10:00Z',
    status: 'new',
    dealerName: 'Bobcat Financial'
  },
  {
    id: '7',
    rating: 'positive',
    category: 'Email',
    message: 'The email templates created for our onboarding sequence are excellent and well-branded.',
    agentId: 'email-agent',
    timestamp: '2025-05-04T13:25:00Z',
    status: 'resolved',
    dealerName: 'Kubota Credit'
  }
];

const AdminPanel: React.FC<AdminPanelProps> = ({ onBack }) => {
  const [feedbackItems, setFeedbackItems] = useState(mockFeedbackData);
  const [selectedFeedback, setSelectedFeedback] = useState<string | null>(null);
  const [filterStatus, setFilterStatus] = useState<'all' | 'new' | 'reviewed' | 'resolved'>('all');
  const [filterRating, setFilterRating] = useState<'all' | 'positive' | 'negative'>('all');
  const [filterAgent, setFilterAgent] = useState<string>('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [currentView, setCurrentView] = useState<'list' | 'details' | 'analytics'>('list');
  
  // Filter feedback based on selected filters
  const filteredFeedback = feedbackItems.filter(item => {
    // Status filter
    if (filterStatus !== 'all' && item.status !== filterStatus) return false;
    
    // Rating filter
    if (filterRating !== 'all' && item.rating !== filterRating) return false;
    
    // Agent filter
    if (filterAgent !== 'all') {
      if (filterAgent === 'none' && item.agentId !== null && item.agentId !== undefined) return false;
      if (filterAgent !== 'none' && item.agentId !== filterAgent) return false;
    }
    
    // Search term
    if (searchTerm && 
        !item.message.toLowerCase().includes(searchTerm.toLowerCase()) &&
        !item.category.toLowerCase().includes(searchTerm.toLowerCase()) &&
        !(item.dealerName && item.dealerName.toLowerCase().includes(searchTerm.toLowerCase()))
       ) {
      return false;
    }
    
    return true;
  });
  
  const getAgentName = (agentId: string | null | undefined) => {
    if (!agentId) return 'General Feedback';
    
    const agentMap: Record<string, string> = {
      'content-agent': 'Content Agent',
      'translation-agent': 'Translation Agent',
      'design-agent': 'Design Agent',
      'pricing-agent': 'Pricing Agent',
      'email-agent': 'Email Agent',
      'documentation-agent': 'Documentation Agent',
      'link-agent': 'Link Agent'
    };
    
    return agentMap[agentId] || agentId;
  };
  
  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return new Intl.DateTimeFormat('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric',
      hour: 'numeric',
      minute: 'numeric'
    }).format(date);
  };
  
  const handleStatusChange = (feedbackId: string, newStatus: 'new' | 'reviewed' | 'resolved') => {
    setFeedbackItems(feedbackItems.map(item => 
      item.id === feedbackId ? { ...item, status: newStatus } : item
    ));
  };
  
  const selectedFeedbackItem = selectedFeedback 
    ? feedbackItems.find(item => item.id === selectedFeedback) 
    : null;
  
  // Calculate analytics data
  const analyticsData = {
    total: feedbackItems.length,
    positive: feedbackItems.filter(item => item.rating === 'positive').length,
    negative: feedbackItems.filter(item => item.rating === 'negative').length,
    neutral: feedbackItems.filter(item => item.rating !== 'positive' && item.rating !== 'negative').length,
    byAgent: Object.entries(
      feedbackItems.reduce((acc, item) => {
        const agentId = item.agentId || 'none';
        acc[agentId] = (acc[agentId] || 0) + 1;
        return acc;
      }, {} as Record<string, number>)
    ).map(([agentId, count]) => ({ 
      agentId, 
      name: getAgentName(agentId), 
      count 
    })),
    byCategory: Object.entries(
      feedbackItems.reduce((acc, item) => {
        acc[item.category] = (acc[item.category] || 0) + 1;
        return acc;
      }, {} as Record<string, number>)
    ).map(([category, count]) => ({ category, count })),
    byStatus: {
      new: feedbackItems.filter(item => item.status === 'new').length,
      reviewed: feedbackItems.filter(item => item.status === 'reviewed').length,
      resolved: feedbackItems.filter(item => item.status === 'resolved').length
    }
  };
  
  return (
    <div className="container mx-auto p-6 max-w-6xl">
      <div className="flex justify-between items-center mb-6">
        <div className="flex items-center">
          <button 
            onClick={onBack}
            className="mr-3 text-blue-600 hover:text-blue-800"
          >
            <ArrowLeft size={20} />
          </button>
          <h2 className="text-2xl font-bold text-gray-800">Admin Panel</h2>
        </div>
        
        <div className="flex space-x-2">
          <button 
            onClick={() => setCurrentView('list')}
            className={`px-4 py-2 rounded-lg ${
              currentView === 'list' 
                ? 'bg-blue-600 text-white' 
                : 'bg-white text-gray-700 border border-gray-300 hover:bg-gray-50'
            }`}
          >
            <MessageSquare size={16} className="inline mr-1" />
            Feedback
          </button>
          <button 
            onClick={() => setCurrentView('analytics')}
            className={`px-4 py-2 rounded-lg ${
              currentView === 'analytics' 
                ? 'bg-blue-600 text-white' 
                : 'bg-white text-gray-700 border border-gray-300 hover:bg-gray-50'
            }`}
          >
            <BarChart size={16} className="inline mr-1" />
            Analytics
          </button>
        </div>
      </div>
      
      {currentView === 'list' && (
        <>
          {selectedFeedback ? (
            <div className="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
              <div className="p-6">
                <button 
                  onClick={() => setSelectedFeedback(null)}
                  className="mb-4 text-blue-600 hover:text-blue-800 flex items-center text-sm"
                >
                  <ArrowLeft size={16} className="mr-1" />
                  Back to all feedback
                </button>
                
                {selectedFeedbackItem && (
                  <div>
                    <div className="flex justify-between items-start mb-4">
                      <div>
                        <div className="flex items-center space-x-2 mb-1">
                          <span className={`p-1 rounded-full ${
                            selectedFeedbackItem.rating === 'positive' 
                              ? 'bg-green-100 text-green-700' 
                              : selectedFeedbackItem.rating === 'negative'
                              ? 'bg-red-100 text-red-700'
                              : 'bg-gray-100 text-gray-700'
                          }`}>
                            {selectedFeedbackItem.rating === 'positive' 
                              ? <ThumbsUp size={16} /> 
                              : selectedFeedbackItem.rating === 'negative'
                              ? <ThumbsDown size={16} />
                              : null
                            }
                          </span>
                          <h3 className="text-lg font-semibold text-gray-800">
                            {selectedFeedbackItem.category}
                          </h3>
                          <span className={`px-2 py-0.5 text-xs rounded-full ${
                            selectedFeedbackItem.status === 'new' 
                              ? 'bg-blue-100 text-blue-800' 
                              : selectedFeedbackItem.status === 'reviewed'
                              ? 'bg-yellow-100 text-yellow-800'
                              : 'bg-green-100 text-green-800'
                          }`}>
                            {selectedFeedbackItem.status.charAt(0).toUpperCase() + selectedFeedbackItem.status.slice(1)}
                          </span>
                        </div>
                        
                        <div className="flex items-center text-sm text-gray-500 mb-6">
                          <span className="flex items-center mr-4">
                            <Bot size={14} className="mr-1" />
                            {getAgentName(selectedFeedbackItem.agentId)}
                          </span>
                          <span className="mr-4">
                            {formatDate(selectedFeedbackItem.timestamp)}
                          </span>
                          {selectedFeedbackItem.dealerName && (
                            <span>
                              Dealer: {selectedFeedbackItem.dealerName}
                            </span>
                          )}
                        </div>
                      </div>
                      
                      <div className="flex space-x-2">
                        <button 
                          onClick={() => handleStatusChange(selectedFeedbackItem.id, 'new')}
                          className={`px-3 py-1 text-xs rounded ${
                            selectedFeedbackItem.status === 'new' 
                              ? 'bg-blue-600 text-white' 
                              : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                          }`}
                        >
                          New
                        </button>
                        <button 
                          onClick={() => handleStatusChange(selectedFeedbackItem.id, 'reviewed')}
                          className={`px-3 py-1 text-xs rounded ${
                            selectedFeedbackItem.status === 'reviewed' 
                              ? 'bg-blue-600 text-white' 
                              : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                          }`}
                        >
                          Reviewed
                        </button>
                        <button 
                          onClick={() => handleStatusChange(selectedFeedbackItem.id, 'resolved')}
                          className={`px-3 py-1 text-xs rounded ${
                            selectedFeedbackItem.status === 'resolved' 
                              ? 'bg-blue-600 text-white' 
                              : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                          }`}
                        >
                          Resolved
                        </button>
                      </div>
                    </div>
                    
                    <div className="p-4 bg-gray-50 rounded-lg mb-6">
                      <h4 className="text-sm font-medium text-gray-700 mb-2">Feedback Message:</h4>
                      <p className="text-gray-800 whitespace-pre-line">
                        {selectedFeedbackItem.message}
                      </p>
                    </div>
                    
                    <div className="border-t border-gray-200 pt-6">
                      <h4 className="text-sm font-medium text-gray-700 mb-3">Actions:</h4>
                      <div className="flex space-x-3">
                        <button className="px-4 py-2 bg-white border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 text-sm">
                          <Flag size={14} className="inline mr-1" />
                          Flag for Review
                        </button>
                        <button className="px-4 py-2 bg-white border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 text-sm">
                          <Check size={14} className="inline mr-1" />
                          Mark as Completed
                        </button>
                        <button className="px-4 py-2 bg-white border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 text-sm">
                          <X size={14} className="inline mr-1" />
                          Dismiss
                        </button>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          ) : (
            <>
              <div className="mb-6 flex justify-between items-center flex-wrap gap-4">
                <div className="relative flex-1 max-w-md">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={18} />
                  <input
                    type="text"
                    placeholder="Search feedback..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 w-full"
                  />
                </div>
                
                <div className="flex flex-wrap space-x-2">
                  <select
                    value={filterStatus}
                    onChange={(e) => setFilterStatus(e.target.value as any)}
                    className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm"
                  >
                    <option value="all">All Statuses</option>
                    <option value="new">New</option>
                    <option value="reviewed">Reviewed</option>
                    <option value="resolved">Resolved</option>
                  </select>
                  
                  <select
                    value={filterRating}
                    onChange={(e) => setFilterRating(e.target.value as any)}
                    className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm"
                  >
                    <option value="all">All Ratings</option>
                    <option value="positive">Positive</option>
                    <option value="negative">Negative</option>
                  </select>
                  
                  <select
                    value={filterAgent}
                    onChange={(e) => setFilterAgent(e.target.value)}
                    className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm"
                  >
                    <option value="all">All Agents</option>
                    <option value="content-agent">Content Agent</option>
                    <option value="translation-agent">Translation Agent</option>
                    <option value="design-agent">Design Agent</option>
                    <option value="pricing-agent">Pricing Agent</option>
                    <option value="email-agent">Email Agent</option>
                    <option value="documentation-agent">Documentation Agent</option>
                    <option value="link-agent">Link Agent</option>
                    <option value="none">General Feedback</option>
                  </select>
                  
                  <button className="px-4 py-2 bg-white border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 flex items-center text-sm">
                    <Download size={16} className="mr-1" />
                    Export
                  </button>
                </div>
              </div>
              
              <div className="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
                {filteredFeedback.length > 0 ? (
                  <table className="w-full">
                    <thead className="bg-gray-50 border-b border-gray-200">
                      <tr>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Rating
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Category
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Message
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Agent
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Date
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Status
                        </th>
                      </tr>
                    </thead>
                    <tbody className="divide-y divide-gray-200">
                      {filteredFeedback.map(feedback => (
                        <tr 
                          key={feedback.id} 
                          className="hover:bg-gray-50 cursor-pointer"
                          onClick={() => setSelectedFeedback(feedback.id)}
                        >
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className={`p-1 rounded-full inline-flex ${
                              feedback.rating === 'positive' 
                                ? 'bg-green-100 text-green-700' 
                                : feedback.rating === 'negative'
                                ? 'bg-red-100 text-red-700'
                                : 'bg-gray-100 text-gray-700'
                            }`}>
                              {feedback.rating === 'positive' 
                                ? <ThumbsUp size={16} /> 
                                : feedback.rating === 'negative'
                                ? <ThumbsDown size={16} />
                                : null
                              }
                            </div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            {feedback.category}
                          </td>
                          <td className="px-6 py-4 text-sm text-gray-900">
                            <div className="max-w-xs truncate">
                              {feedback.message}
                            </div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            {getAgentName(feedback.agentId)}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            {formatDate(feedback.timestamp)}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <span className={`px-2 py-1 text-xs rounded-full ${
                              feedback.status === 'new' 
                                ? 'bg-blue-100 text-blue-800' 
                                : feedback.status === 'reviewed'
                                ? 'bg-yellow-100 text-yellow-800'
                                : 'bg-green-100 text-green-800'
                            }`}>
                              {feedback.status.charAt(0).toUpperCase() + feedback.status.slice(1)}
                            </span>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                ) : (
                  <div className="p-8 text-center">
                    <div className="inline-flex items-center justify-center w-16 h-16 bg-gray-100 rounded-full mb-4">
                      <MessageSquare size={28} className="text-gray-400" />
                    </div>
                    <h3 className="text-lg font-medium text-gray-800 mb-2">No feedback found</h3>
                    <p className="text-gray-500">
                      {searchTerm || filterStatus !== 'all' || filterRating !== 'all' || filterAgent !== 'all'
                        ? 'Try changing your search or filters'
                        : 'There is no feedback submitted yet'
                      }
                    </p>
                  </div>
                )}
              </div>
            </>
          )}
        </>
      )}
      
      {currentView === 'analytics' && (
        <div className="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden p-6">
          <h3 className="text-xl font-semibold text-gray-800 mb-6">Feedback Analytics</h3>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            <div className="bg-white border border-gray-200 rounded-lg p-4">
              <div className="flex justify-between items-start">
                <div>
                  <h4 className="text-sm font-medium text-gray-500 mb-1">Total Feedback</h4>
                  <p className="text-3xl font-bold text-gray-800">{analyticsData.total}</p>
                </div>
                <span className="p-2 bg-blue-100 text-blue-700 rounded-full">
                  <MessageSquare size={24} />
                </span>
              </div>
            </div>
            
            <div className="bg-white border border-gray-200 rounded-lg p-4">
              <div className="flex justify-between items-start">
                <div>
                  <h4 className="text-sm font-medium text-gray-500 mb-1">Positive Feedback</h4>
                  <p className="text-3xl font-bold text-gray-800">{analyticsData.positive}</p>
                  <p className="text-sm text-gray-500">{(analyticsData.positive / analyticsData.total * 100).toFixed(1)}% of total</p>
                </div>
                <span className="p-2 bg-green-100 text-green-700 rounded-full">
                  <ThumbsUp size={24} />
                </span>
              </div>
            </div>
            
            <div className="bg-white border border-gray-200 rounded-lg p-4">
              <div className="flex justify-between items-start">
                <div>
                  <h4 className="text-sm font-medium text-gray-500 mb-1">Issues Reported</h4>
                  <p className="text-3xl font-bold text-gray-800">{analyticsData.negative}</p>
                  <p className="text-sm text-gray-500">{(analyticsData.negative / analyticsData.total * 100).toFixed(1)}% of total</p>
                </div>
                <span className="p-2 bg-red-100 text-red-700 rounded-full">
                  <AlertTriangle size={24} />
                </span>
              </div>
            </div>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            <div>
              <h4 className="text-lg font-medium text-gray-800 mb-4">Feedback by Agent</h4>
              <div className="space-y-3">
                {analyticsData.byAgent
                  .sort((a, b) => b.count - a.count)
                  .map(agent => (
                    <div key={agent.agentId} className="flex items-center">
                      <div className="w-24 flex-shrink-0 text-sm text-gray-600">{agent.name}</div>
                      <div className="flex-1 ml-2">
                        <div className="relative h-8 bg-gray-100 rounded overflow-hidden">
                          <div 
                            className="absolute top-0 left-0 h-full bg-blue-600"
                            style={{ width: `${(agent.count / analyticsData.total) * 100}%` }}
                          ></div>
                          <div className="absolute inset-0 flex items-center px-3">
                            <span className="text-xs font-medium text-white">{agent.count}</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
              </div>
            </div>
            
            <div>
              <h4 className="text-lg font-medium text-gray-800 mb-4">Feedback by Category</h4>
              <div className="space-y-3">
                {analyticsData.byCategory
                  .sort((a, b) => b.count - a.count)
                  .map(cat => (
                    <div key={cat.category} className="flex items-center">
                      <div className="w-36 flex-shrink-0 text-sm text-gray-600 truncate">{cat.category}</div>
                      <div className="flex-1 ml-2">
                        <div className="relative h-8 bg-gray-100 rounded overflow-hidden">
                          <div 
                            className="absolute top-0 left-0 h-full bg-green-600"
                            style={{ width: `${(cat.count / analyticsData.total) * 100}%` }}
                          ></div>
                          <div className="absolute inset-0 flex items-center px-3">
                            <span className="text-xs font-medium text-white">{cat.count}</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
              </div>
            </div>
          </div>
          
          <div className="mt-8 pt-6 border-t border-gray-200">
            <h4 className="text-lg font-medium text-gray-800 mb-4">Feedback Status</h4>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="bg-blue-50 border border-blue-100 rounded-lg p-4">
                <div className="flex justify-between items-center mb-2">
                  <h5 className="font-medium text-blue-800">New</h5>
                  <span className="px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded-full">
                    {analyticsData.byStatus.new}
                  </span>
                </div>
                <div className="text-sm text-blue-700">
                  Feedback that needs initial review
                </div>
              </div>
              
              <div className="bg-yellow-50 border border-yellow-100 rounded-lg p-4">
                <div className="flex justify-between items-center mb-2">
                  <h5 className="font-medium text-yellow-800">Reviewed</h5>
                  <span className="px-2 py-1 text-xs bg-yellow-100 text-yellow-800 rounded-full">
                    {analyticsData.byStatus.reviewed}
                  </span>
                </div>
                <div className="text-sm text-yellow-700">
                  Feedback that has been reviewed but not resolved
                </div>
              </div>
              
              <div className="bg-green-50 border border-green-100 rounded-lg p-4">
                <div className="flex justify-between items-center mb-2">
                  <h5 className="font-medium text-green-800">Resolved</h5>
                  <span className="px-2 py-1 text-xs bg-green-100 text-green-800 rounded-full">
                    {analyticsData.byStatus.resolved}
                  </span>
                </div>
                <div className="text-sm text-green-700">
                  Feedback that has been fully addressed
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AdminPanel;